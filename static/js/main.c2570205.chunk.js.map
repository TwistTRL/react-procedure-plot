{"version":3,"sources":["lib/ProcedureObject.js","lib/ProcedurePlot.js","lib/ProcedurePlotTimeDiff.js","lib/ProcedurePlotHoverSelector.js","lib/ProcedurePlotClickSelector.js","lib/index.js","index.js"],"names":["PROCEDURE_DISPLAY","HLHS STAGE I, CARDIAC","CHEST CLOSURE, CARDIAC OFF UNIT","GASTROSTOMY, LAPAROSCOPIC, GENSURG","VESICOSTOMY CREATION/CLOSURE, GU","BIDIRECTIONAL GLEN SHUNT, CARDIAC","PROCEDURE_TYPE","ProcedureObject","_ref","_this","this","id","name","start","end","Object","classCallCheck","getType","memoize_one","getDisplay","getDisplayBitmap","font","width","height","rotatedPos","canvas","document","createElement","ctx","getContext","display","measureText","fillStyle","textAlign","textBaseline","rotate","Math","PI","getRotatedAxisCoordinate","fillText","x","y","getDisplayHitbox","getDisplaySelectedBitmap","getDisplaySelectedHitbox","startDomX","endDomX","round","lineWidth","lineCenter","strokeStyle","beginPath","moveTo","lineTo","stroke","bitmap","drawImage","hitbox","fillRect","compareProcedureObjects","obj1","obj2","ProcedurePlot","props","possibleConstructorReturn","getPrototypeOf","call","ref","React","createRef","_this$props","react_default","a","style","draw","_this$props2","data","selection","minX","maxX","render_memo","memo","ProcedureObjectCollection","map","obj","sort","current","globalAlpha","clearRect","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","toDomXCoord_Linear","drawSelected","err","return","PureComponent","ProcedurePlotTimeDiff","hoveringPosition","length","normalizedData","d","selectionEndDomX","hoverX","fromDomXCoord_Linear","domX","react_timediff_dist_default","startX","endX","ProcedurePlotHoverSelector","nextProps","nextState","select","selectHandler","select_memo","procedureObjectCollection","filteredProcedureObjects","filter","ends","index","max","bisect_left","Component","ProcedurePlotClickSelector","lastEvent","pickingCanvas","clickPosition","curSelection","translate","domY","drawSelectedHitbox","drawHitbox","getImageData","all","ProcedurePlotBundle","state","data_","_this2","_this$state","Fragment","type","min","onChange","ev","setState","Number","parseInt","target","JSON","stringify","lib","ProcedurePlotTimeDiffBundle","_this3","_this4","_this$state2","objectSpread","lib_ProcedurePlotTimeDiff","ProcedurePlotHoverSelectorBundle","_this5","_this6","_this$state3","lib_ProcedurePlotHoverSelector","ProcedurePlotClickSelectorBundle","_this7","clickPosition_","_this8","_this$state4","onClick","position","left","top","backgroundColor","lib_ProcedurePlotClickSelector","ProcedurePlotFullDemo","_this9","hoverSelection","clickSelection","_this10","_this$state5","react_plot_interaction_box_dist","transitionGraph","INTERACTION_MODEL_BARE","render","positions","updateHandler","App","react_router_dom","className","to","react_router","path","exact","component","ReactDOM","src_App","getElementById"],"mappings":"wQAGMA,EAAoB,CAAEC,wBAAwB,MACxBC,kCAAkC,aAClCC,qCAAqC,kBACrCC,mCAAmC,KACnCC,oCAAoC,MAG1DC,EAAiB,CAACL,wBAAwB,EACxBC,kCAAkC,EAClCC,qCAAqC,EACrCC,mCAAmC,EACnCC,oCAAoC,GA0T7CE,aAtTb,SAAAA,EAAAC,GAAgC,IAAAC,EAAAC,KAAnBC,EAAmBH,EAAnBG,GAAGC,EAAgBJ,EAAhBI,KAAKC,EAAWL,EAAXK,MAAMC,EAAKN,EAALM,IAAKC,OAAAC,EAAA,EAAAD,CAAAL,KAAAH,GAAAG,KAOhCO,QAAUC,sBAAY,WACpB,OAAOZ,EAAeG,EAAKG,QARGF,KAWhCS,WAAaD,sBAAY,WACvB,OAAOlB,EAAkBS,EAAKG,OAASH,EAAKG,OAZdF,KAehCU,iBAAmBF,sBAAY,WAC7B,IAGIG,EACAC,EACAC,EACAC,EANAC,EAASC,SAASC,cAAc,UAChCC,EAAMH,EAAOI,WAAW,MACxBC,EAAUrB,EAAKU,aAKnB,OAAOV,EAAKQ,WACV,KAAK,EACHI,EAAO,YACPO,EAAIP,KAAOA,EACXE,EAASK,EAAIG,YAAYD,GAASR,MAClCA,EAAQ,GACRG,EAAOH,MAAQA,EACfG,EAAOF,OAASA,EAChBK,EAAIP,KAAOA,EACXO,EAAII,UAAY,MAChBJ,EAAIK,UAAY,SAChBL,EAAIM,aAAe,SACnBN,EAAIO,QAAQC,KAAKC,GAAG,GACpBb,EAAac,mCAAyBhB,EAAM,EAAEC,EAAO,GAAGa,KAAKC,GAAG,GAChET,EAAIW,SAAST,EAAQN,EAAWgB,EAAEhB,EAAWiB,GAC7C,MACF,KAAK,EACHpB,EAAO,YACPO,EAAIP,KAAOA,EACXE,EAASK,EAAIG,YAAYD,GAASR,MAClCA,EAAQ,GACRG,EAAOH,MAAQA,EACfG,EAAOF,OAASA,EAChBK,EAAIP,KAAOA,EACXO,EAAII,UAAY,SAChBJ,EAAIK,UAAY,SAChBL,EAAIM,aAAe,SACnBN,EAAIO,QAAQC,KAAKC,GAAG,GACpBb,EAAac,mCAAyBhB,EAAM,EAAEC,EAAO,GAAGa,KAAKC,GAAG,GAChET,EAAIW,SAAST,EAAQN,EAAWgB,EAAEhB,EAAWiB,GAC7C,MACF,KAAK,EACL,QACEpB,EAAO,YACPO,EAAIP,KAAOA,EACXE,EAASK,EAAIG,YAAYD,GAASR,MAClCA,EAAQ,GACRG,EAAOH,MAAQA,EACfG,EAAOF,OAASA,EAChBK,EAAIP,KAAOA,EACXO,EAAII,UAAY,QAChBJ,EAAIK,UAAY,SAChBL,EAAIM,aAAe,SACnBN,EAAIO,QAAQC,KAAKC,GAAG,GACpBb,EAAac,mCAAyBhB,EAAM,EAAEC,EAAO,GAAGa,KAAKC,GAAG,GAChET,EAAIW,SAAST,EAAQN,EAAWgB,EAAEhB,EAAWiB,GAGjD,OAAOhB,IAvEuBf,KA0EhCgC,iBAAmBxB,sBAAY,WAC7B,IAGIG,EACAC,EACAC,EAJAK,EADSF,SAASC,cAAc,UACnBE,WAAW,MACxBC,EAAUrB,EAAKU,aAInB,OAAOV,EAAKQ,WACV,KAAK,EAML,KAAK,EACHI,EAAO,YACPO,EAAIP,KAAOA,EACXE,EAASK,EAAIG,YAAYD,GAASR,MAClCA,EAAQ,GACR,MACF,KAAK,EACL,QACED,EAAO,YACPO,EAAIP,KAAOA,EACXE,EAASK,EAAIG,YAAYD,GAASR,MAClCA,EAAQ,GAGZ,MAAO,CAACA,QAAMC,YAtGgBb,KAyGhCiC,yBAA2BzB,sBAAY,WACrC,IAGIG,EACAC,EACAC,EALAE,EAASC,SAASC,cAAc,UAChCC,EAAMH,EAAOI,WAAW,MACxBC,EAAUrB,EAAKU,aAInB,OAAOV,EAAKQ,WACV,KAAK,EACHI,EAAO,iBACPO,EAAIP,KAAOA,EACXE,EAASK,EAAIG,YAAYD,GAASR,MAClCA,EAAQ,GACRG,EAAOH,MAAQA,EACfG,EAAOF,OAASA,EAChBK,EAAIP,KAAOA,EACXO,EAAII,UAAY,MAChBJ,EAAIK,UAAY,SAChBL,EAAIM,aAAe,SACnBN,EAAIO,QAAQC,KAAKC,GAAG,GACpBT,EAAIW,SAAST,GAASP,EAAO,EAAED,EAAM,GACrC,MACF,KAAK,EACHD,EAAO,iBACPO,EAAIP,KAAOA,EACXE,EAASK,EAAIG,YAAYD,GAASR,MAClCA,EAAQ,GACRG,EAAOH,MAAQA,EACfG,EAAOF,OAASA,EAChBK,EAAIP,KAAOA,EACXO,EAAII,UAAY,SAChBJ,EAAIK,UAAY,SAChBL,EAAIM,aAAe,SACnBN,EAAIO,QAAQC,KAAKC,GAAG,GACpBT,EAAIW,SAAST,GAASP,EAAO,EAAED,EAAM,GACrC,MACF,KAAK,EACL,QACED,EAAO,iBACPO,EAAIP,KAAOA,EACXE,EAASK,EAAIG,YAAYD,GAASR,MAClCA,EAAQ,GACRG,EAAOH,MAAQA,EACfG,EAAOF,OAASA,EAChBK,EAAIP,KAAOA,EACXO,EAAII,UAAY,QAChBJ,EAAIK,UAAY,SAChBL,EAAIM,aAAe,SACnBN,EAAIO,QAAQC,KAAKC,GAAG,GACpBT,EAAIW,SAAST,GAASP,EAAO,EAAED,EAAM,GAGzC,OAAOG,IA7JuBf,KAgKhCkC,yBAA2B1B,sBAAY,WACrC,IAGIG,EACAC,EACAC,EAJAK,EADSF,SAASC,cAAc,UACnBE,WAAW,MACxBC,EAAUrB,EAAKU,aAInB,OAAOV,EAAKQ,WACV,KAAK,EAML,KAAK,EACHI,EAAO,iBACPO,EAAIP,KAAOA,EACXE,EAASK,EAAIG,YAAYD,GAASR,MAClCA,EAAQ,GACR,MACF,KAAK,EACL,QACED,EAAO,iBACPO,EAAIP,KAAOA,EACXE,EAASK,EAAIG,YAAYD,GAASR,MAClCA,EAAQ,GAGZ,MAAO,CAACA,QAAMC,YA3Ldb,KAAKC,GAAKA,EACVD,KAAKE,KAAOA,EACZF,KAAKG,MAAQA,EACbH,KAAKI,IAAMA,mDA2LRc,EAAIN,EAAMC,EAAOsB,EAAUC,GAC9BD,EAAYT,KAAKW,MAAMF,GAEvB,IAAIG,GADJF,EAAUV,KAAKW,MAAMD,IACG,EAAED,EACtBI,GAAcJ,EAAUC,EAAQ,GAAK,EAEzC,OAAQpC,KAAKO,WACX,KAAK,EACHW,EAAIsB,YAAc,MAClBtB,EAAIoB,UAAYA,EAChBpB,EAAIuB,YACJvB,EAAIwB,OAAOH,EAAW,GACtBrB,EAAIyB,OAAOJ,EAAW1B,GACtBK,EAAI0B,SACJ,MACF,KAAK,EACH1B,EAAIsB,YAAc,SAClBtB,EAAIoB,UAAYA,EAChBpB,EAAIuB,YACJvB,EAAIwB,OAAOH,EAAW,GACtBrB,EAAIyB,OAAOJ,EAAW1B,GACtBK,EAAI0B,SACJ,MACF,KAAK,EACL,QACE1B,EAAIsB,YAAc,QAClBtB,EAAIoB,UAAYA,EAChBpB,EAAIuB,YACJvB,EAAIwB,OAAOH,EAAW,GACtBrB,EAAIyB,OAAOJ,EAAW1B,GACtBK,EAAI0B,SAIR,IAAIC,EAAS7C,KAAKU,mBAClBQ,EAAI4B,UAAUD,EACAV,EAAU,EAAEU,EAAOjC,MACnB,sCAGLM,EAAIN,EAAMC,EAAOsB,EAAUC,GACpCD,EAAYT,KAAKW,MAAMF,GAEvB,IAAIG,GADJF,EAAUV,KAAKW,MAAMD,IACKD,EAAU,EAChCI,GAAcJ,EAAUC,EAAQ,GAAK,EAEzClB,EAAIuB,YACJvB,EAAIoB,UAAYA,EAChBpB,EAAIwB,OAAOH,EAAW,GACtBrB,EAAIyB,OAAOJ,EAAW1B,GACtBK,EAAI0B,SAEJ,IAAIG,EAAS/C,KAAKgC,mBAClBd,EAAI8B,SAAUb,EAAU,EAAEY,EAAOnC,MACnB,EACAmC,EAAOnC,MACPmC,EAAOlC,6CAGVK,EAAIN,EAAMC,EAAOsB,EAAUC,GACtCD,EAAYT,KAAKW,MAAMF,GAEvB,IAAIG,GADJF,EAAUV,KAAKW,MAAMD,IACKD,EAAU,EAChCI,GAAcJ,EAAUC,EAAQ,GAAK,EAEzC,OAAQpC,KAAKO,WACX,KAAK,EACHW,EAAIsB,YAAc,MAClBtB,EAAIoB,UAAYA,EAChBpB,EAAIuB,YACJvB,EAAIwB,OAAOH,EAAW,GACtBrB,EAAIyB,OAAOJ,EAAW1B,GACtBK,EAAI0B,SACJ,MACF,KAAK,EACH1B,EAAIsB,YAAc,SAClBtB,EAAIoB,UAAYA,EAChBpB,EAAIuB,YACJvB,EAAIwB,OAAOH,EAAW,GACtBrB,EAAIyB,OAAOJ,EAAW1B,GACtBK,EAAI0B,SACJ,MACF,KAAK,EACL,QACE1B,EAAIsB,YAAc,QAClBtB,EAAIoB,UAAYA,EAChBpB,EAAIuB,YACJvB,EAAIwB,OAAOH,EAAW,GACtBrB,EAAIyB,OAAOJ,EAAW1B,GACtBK,EAAI0B,SAIR,IAAIC,EAAS7C,KAAKiC,2BAClBf,EAAI4B,UAAUD,EACAV,EAAU,EAAEU,EAAOjC,MACnB,8CAGGM,EAAIN,EAAMC,EAAOsB,EAAUC,GAC5CD,EAAYT,KAAKW,MAAMF,GAEvB,IAAIG,GADJF,EAAUV,KAAKW,MAAMD,IACKD,EAAU,EAChCI,GAAcJ,EAAUC,EAAQ,GAAK,EAEzClB,EAAIuB,YACJvB,EAAIoB,UAAYA,EAChBpB,EAAIwB,OAAOH,EAAW,GACtBrB,EAAIyB,OAAOJ,EAAW1B,GACtBK,EAAI0B,SAEJ,IAAIG,EAAS/C,KAAKkC,2BAClBhB,EAAI8B,SAAUb,EAAU,EAAEY,EAAOnC,MACnB,EACAmC,EAAOnC,MACPmC,EAAOlC,iBAOlB,SAASoC,EAAwBC,EAAKC,GAC3C,OAAID,EAAK/C,QAAQgD,EAAKhD,MACb+C,EAAK/C,MAAMgD,EAAKhD,MAGhB+C,EAAK9C,IAAI+C,EAAK/C,QC3QVgD,cA9Db,SAAAA,EAAYC,GAAM,IAAAtD,EAAA,OAAAM,OAAAC,EAAA,EAAAD,CAAAL,KAAAoD,IAChBrD,EAAAM,OAAAiD,EAAA,EAAAjD,CAAAL,KAAAK,OAAAkD,EAAA,EAAAlD,CAAA+C,GAAAI,KAAAxD,KAAMqD,KACDI,IAAMC,IAAMC,YAFD5D,wEAKT,IAAA6D,EACgB5D,KAAKqD,MAAtBxC,EADC+C,EACD/C,OAAOD,EADNgD,EACMhD,MACb,OACEiD,EAAAC,EAAA7C,cAAA,UAAQwC,IAAKzD,KAAKyD,IAAK5C,OAAQA,EAAQD,MAAOA,EAAOmD,MAAO,CAAC3C,QAAQ,QAAQR,MAAMA,EAAMC,OAAOA,iDAKlGb,KAAKgE,oDAILhE,KAAKgE,sCAGA,IAAAC,EAE2BjE,KAAKqD,MAD/Ba,EADDD,EACCC,KAAKC,EADNF,EACME,UACLC,EAFDH,EAECG,KAAKC,EAFNJ,EAEMI,KAAKzD,EAFXqD,EAEWrD,MAAMC,EAFjBoD,EAEiBpD,OAEtBb,KAAKsE,YAActE,KAAKsE,aAAe,GACvC,IAAIC,EAAOvE,KAAKsE,YACZC,EAAKL,OAASA,IAChBK,EAAKL,KAAOA,EACZK,EAAKC,0BAA4BN,EAAKO,IAAK,SAACC,GAAD,OAAO,IAAI7E,EAAgB6E,KAC/BC,KAAK1B,IAG9C,IACI/B,EADSlB,KAAKyD,IAAImB,QACLzD,WAAW,MAC5BD,EAAI2D,YAAc,EAClB3D,EAAI4D,UAAU,EAAE,EAAElE,EAAMC,GAfnB,IAAAkE,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAiBL,QAAAC,EAAAC,EAAgBb,EAAKC,0BAArBa,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAAgD,KAAvCL,EAAuCS,EAAAM,MAC9C,KAAIf,EAAIvE,MAAQkE,GAAQK,EAAItE,IAAMgE,GAAlC,CAGA,IAAIjC,EAAYuD,6BAAmB9E,EAAMwD,EAAKC,EAAKK,EAAIvE,OACnDiC,EAAUsD,6BAAmB9E,EAAMwD,EAAKC,EAAKK,EAAItE,KACjDsE,EAAIzE,KAAOkE,EACbO,EAAIiB,aAAazE,EAAIN,EAAMC,EAAOsB,EAAUC,GAG5CsC,EAAIV,KAAK9C,EAAIN,EAAMC,EAAOsB,EAAUC,KA3BnC,MAAAwD,GAAAZ,GAAA,EAAAC,EAAAW,EAAA,YAAAb,GAAA,MAAAK,EAAAS,QAAAT,EAAAS,SAAA,WAAAb,EAAA,MAAAC,WArBmBa,kCCiDbC,mLAhDJ,IAAAnC,EAQG5D,KAAKqD,MANTzC,EAFCgD,EAEDhD,MACAC,EAHC+C,EAGD/C,OACAqD,EAJCN,EAIDM,KACAC,EALCP,EAKDO,UACA6B,EANCpC,EAMDoC,iBACA5B,EAPCR,EAODQ,KAAKC,EAPJT,EAOIS,KAEX,GAAuB,OAAnB2B,GAAuC,OAAZ7B,GAAkC,IAAdD,EAAK+B,OACtD,OAAO,KAETjG,KAAKsE,YAActE,KAAKsE,aAAe,GACvC,IAAIC,EAAOvE,KAAKsE,YAChB,GAAIC,EAAKL,OAAOA,EAAM,CACpBK,EAAKL,KAAOA,EACZK,EAAK2B,eAAiB,GAFF,IAAAnB,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAGpB,QAAAC,EAAAC,EAAclB,EAAdmB,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAAoB,KAAXoB,EAAWhB,EAAAM,MAClBlB,EAAK2B,eAAeC,EAAElG,IAAMkG,GAJV,MAAAP,GAAAZ,GAAA,EAAAC,EAAAW,EAAA,YAAAb,GAAA,MAAAK,EAAAS,QAAAT,EAAAS,SAAA,WAAAb,EAAA,MAAAC,IAOtB,IACImB,EADc7B,EAAK2B,eAAe/B,GACH/D,IAC/BiG,EAASC,+BAAqB1F,EAAMwD,EAAKC,EAAK2B,EAAiBO,MACnE,OACE1C,EAAAC,EAAA7C,cAAA,OAAK8C,MAAO,CAACnD,MAAMA,EAAOC,OAAOA,IAC/BgD,EAAAC,EAAA7C,cAACuF,EAAA1C,EAAD,CAAUlD,MAAOA,EACPC,OAAQ,GACRuD,KAAMA,EACNC,KAAMA,EACNoC,OAAQL,EACRM,KAAML,YAhCYP,yBC8DrBa,mLA5DX,OAAO,mDAGaC,EAAUC,GAC9B,OAAID,EAAUZ,mBAAmBhG,KAAKqD,MAAM2C,6DAO5ChG,KAAK8G,sDAIL9G,KAAK8G,0CAGE,IAAAlD,EAIgB5D,KAAKqD,MAHtBa,EADCN,EACDM,KACAE,EAFCR,EAEDQ,KAAKC,EAFJT,EAEIS,KAAKzD,EAFTgD,EAEShD,MACVoF,EAHCpC,EAGDoC,iBACAe,EAJCnD,EAIDmD,cACN,QAAuB7B,IAAnBc,EAGJ,GAAuB,OAAnBA,EAAJ,CAIAhG,KAAKgH,YAAchH,KAAKgH,aAAe,GACvC,IAAIzC,EAAOvE,KAAKgH,YAEhB,GAAIzC,EAAKL,OAASA,EAAO,CACvBK,EAAKL,KAAOA,EACZ,IAAI+C,EAA4B/C,EAAKO,IAAK,SAAAC,GAAG,OAAE,IAAI7E,EAAgB6E,KACnEH,EAAK2C,yBAA2BD,EAA0BE,OAAQ,SAAAzC,GAAG,OAAkB,IAAhBA,EAAInE,YAC3EgE,EAAK6C,KAAO7C,EAAK2C,yBAAyBzC,IAAI,SAAA3E,GAAA,OAAAA,EAAEM,MACjBuE,OAEjC,GAA2C,IAAvCJ,EAAK2C,yBAAyBjB,OAAlC,CAIA,IAAII,EAASC,+BAAqB1F,EAAMwD,EAAKC,EAAK2B,EAAiBO,MAC/Dc,EAAQ3F,KAAK4F,IAAI,EAAEC,sBAAYhD,EAAK6C,KAAKf,IAE7CU,EADgBxC,EAAK2C,yBAAyBG,GAAOpH,UAnBnD8G,EAAc,aA7BqBS,aCuF1BC,cAtFb,SAAAA,EAAYpE,GAAM,IAAAtD,EAAA,OAAAM,OAAAC,EAAA,EAAAD,CAAAL,KAAAyH,IAChB1H,EAAAM,OAAAiD,EAAA,EAAAjD,CAAAL,KAAAK,OAAAkD,EAAA,EAAAlD,CAAAoH,GAAAjE,KAAAxD,KAAMqD,KACDqE,UAAY,KACjB3H,EAAK4H,cAAgB3G,SAASC,cAAc,UAC5ClB,EAAK4H,cAAc/G,MAAQ,EAC3Bb,EAAK4H,cAAc9G,OAAS,EALZd,wEAShB,OAAO,iDAIPC,KAAK8G,sDAIL9G,KAAK8G,0CAGE,IAAAlD,EAKgB5D,KAAKqD,MAJtBa,EADCN,EACDM,KACAC,EAFCP,EAEDO,UACAC,EAHCR,EAGDQ,KAAKC,EAHJT,EAGIS,KAAKzD,EAHTgD,EAGShD,MAAMC,EAHf+C,EAGe/C,OAChB+G,EAJChE,EAIDgE,cACAb,EALCnD,EAKDmD,cACN,GAAIa,IAAgB5H,KAAK0H,UAIzB,GADA1H,KAAK0H,UAAYE,EACZA,EAAL,CAIA5H,KAAKgH,YAAchH,KAAKgH,aAAe,GACvC,IAAIzC,EAAOvE,KAAKgH,YACZzC,EAAKL,OAASA,IAChBK,EAAKL,KAAOA,EACZK,EAAKC,0BAA4BN,EAAKO,IAAK,SAACC,GAAD,OAAO,IAAI7E,EAAgB6E,KAC/BC,KAAK1B,IAnBvC,IA2BH4E,EAJA3G,EADkBlB,KAAjB2H,cACmBxG,WAAW,MACnCD,EAAI4D,UAAU,EAAE,EAAE,EAAE,GACpB5D,EAAI4G,WAAWF,EAAcrB,MAAMqB,EAAcG,MAzB1C,IAAAhD,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IA4BP,QAAAC,EAAAC,EAAgBb,EAAKC,0BAArBa,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAAgD,KAAvCL,EAAuCS,EAAAM,MAC9C,KAAIf,EAAIvE,MAAQkE,GAAQK,EAAItE,IAAMgE,GAAlC,CAIA,IAAIjC,EAAYuD,6BAAmB9E,EAAMwD,EAAKC,EAAKK,EAAIvE,OACnDiC,EAAUsD,6BAAmB9E,EAAMwD,EAAKC,EAAKK,EAAItE,KASrD,GARIsE,EAAIzE,KAAOkE,EACbO,EAAIsD,mBAAmB9G,EAAIN,EAAMC,EAAOsB,EAAUC,GAGlDsC,EAAIuD,WAAW/G,EAAIN,EAAMC,EAAOsB,EAAUC,GAItB,IADRlB,EAAIgH,aAAa,EAAE,EAAE,EAAE,GACzBhE,KAAK,GAAQ,EACvB2D,EAAenD,EAAIzE,MACEkE,IACnB0D,EAAe,MAEjB,SAhDG,MAAAjC,GAAAZ,GAAA,EAAAC,EAAAW,EAAA,YAAAb,GAAA,MAAAK,EAAAS,QAAAT,EAAAS,SAAA,WAAAb,EAAA,MAAAC,GAmDP8B,EAAcc,GACd3G,EAAI4G,UAAUF,EAAcrB,KAAKqB,EAAcG,WAzC7ChB,EAAc,aAhCqBjB,iBCF1B1C,YCMTc,SAAO,CACX3E,wBAAyB,CAAC,CAAEU,GAAG,EACHC,KAAK,wBACLC,MAAM,IAAKC,IAAI,MAC3CZ,kCAAmC,CAAC,CAAES,GAAG,EACHC,KAAK,kCACLC,MAAM,KAAMC,IAAI,OACtDX,qCAAsC,CAAC,CAACQ,GAAG,EACHC,KAAK,qCACLC,MAAM,IAAMC,IAAI,OACxDV,mCAAoC,CAAC,CAACO,GAAG,EACHC,KAAK,mCACLC,MAAM,MAAOC,IAAI,QACvDT,oCAAqC,CAAC,CAAEM,GAAG,EACHC,KAAK,oCACLC,MAAM,KAAOC,IAAI,QACzD+H,IAAO,CAAC,CAAElI,GAAG,EACHC,KAAK,wBACLC,MAAM,IAAKC,IAAI,KACjB,CAAEH,GAAG,EACHC,KAAK,kCACLC,MAAM,KAAMC,IAAI,MAClB,CAAEH,GAAG,EACHC,KAAK,qCACLC,MAAM,IAAMC,IAAI,MAClB,CAAEH,GAAG,EACHC,KAAK,mCACLC,MAAM,MAAOC,IAAI,OACnB,CAAEH,GAAG,EACHC,KAAK,oCACLC,MAAM,KAAOC,IAAI,UAIvBgI,cACJ,SAAAA,EAAY/E,GAAM,IAAAtD,EAAA,OAAAM,OAAAC,EAAA,EAAAD,CAAAL,KAAAoI,IAChBrI,EAAAM,OAAAiD,EAAA,EAAAjD,CAAAL,KAAAK,OAAAkD,EAAA,EAAAlD,CAAA+H,GAAA5E,KAAAxD,KAAMqD,KACDgF,MAAM,CAACzH,MAAO,IACPC,OAAQ,IACRuD,KAAM,EACNC,KAAM,IACNiE,MAAO,wBACPnE,UAAW,GAPPpE,wEAWT,IAAAwI,EAAAvI,KAAAwI,EACwCxI,KAAKqI,MAA/CzH,EADE4H,EACF5H,MAAMC,EADJ2H,EACI3H,OAAOuD,EADXoE,EACWpE,KAAKC,EADhBmE,EACgBnE,KAAKiE,EADrBE,EACqBF,MAAMnE,EAD3BqE,EAC2BrE,UAClC,OACEN,EAAAC,EAAA7C,cAAA4C,EAAAC,EAAA2E,SAAA,KACE5E,EAAAC,EAAA7C,cAAA,gBACE4C,EAAAC,EAAA7C,cAAA,uBACA4C,EAAAC,EAAA7C,cAAA,mBAEE4C,EAAAC,EAAA7C,cAAA,SAAQyH,KAAK,QAAQC,IAAK,IAAKrB,IAAK,IAAK7B,MAAO7E,EACxCgI,SAAU,SAACC,GAAD,OAAMN,EAAKO,SAAS,CAAClI,MAAMmI,OAAOC,SAASH,EAAGI,OAAOxD,YAEtE7E,GAEHiD,EAAAC,EAAA7C,cAAA,oBAEE4C,EAAAC,EAAA7C,cAAA,SAAQyH,KAAK,QAAQC,IAAK,IAAKrB,IAAK,IAAK7B,MAAO5E,EACxC+H,SAAU,SAACC,GAAD,OAAMN,EAAKO,SAAS,CAACjI,OAAOkI,OAAOC,SAASH,EAAGI,OAAOxD,YAEvE5E,GAEHgD,EAAAC,EAAA7C,cAAA,kBAEE4C,EAAAC,EAAA7C,cAAA,SAAQyH,KAAK,QAAQC,IAAK,EAAGrB,IAAKjD,EAAMoB,MAAOrB,EACvCwE,SAAU,SAACC,GAAD,OAAMN,EAAKO,SAAS,CAAC1E,KAAK2E,OAAOC,SAASH,EAAGI,OAAOxD,YAErErB,GAEHP,EAAAC,EAAA7C,cAAA,kBAEE4C,EAAAC,EAAA7C,cAAA,SAAQyH,KAAK,QAAQC,IAAKvE,EAAMkD,IAAK,IAAO7B,MAAOpB,EAC3CuE,SAAU,SAACC,GAAD,OAAMN,EAAKO,SAAS,CAACzE,KAAK0E,OAAOC,SAASH,EAAGI,OAAOxD,YAErEpB,GAEHR,EAAAC,EAAA7C,cAAA,kBAEE4C,EAAAC,EAAA7C,cAAA,UAAQwE,MAAO6C,EACPM,SAAU,SAACC,GAAD,OAAMN,EAAKO,SAAS,CAACR,MAAMO,EAAGI,OAAOxD,UACrD5B,EAAAC,EAAA7C,cAAA,UAAQwE,MAAM,yBAAd,yBACA5B,EAAAC,EAAA7C,cAAA,UAAQwE,MAAM,mCAAd,mCACA5B,EAAAC,EAAA7C,cAAA,UAAQwE,MAAM,sCAAd,sCACA5B,EAAAC,EAAA7C,cAAA,UAAQwE,MAAM,oCAAd,oCACA5B,EAAAC,EAAA7C,cAAA,UAAQwE,MAAM,qCAAd,qCACA5B,EAAAC,EAAA7C,cAAA,UAAQwE,MAAM,OAAd,QAEF5B,EAAAC,EAAA7C,cAAA,WACGiI,KAAKC,UAAUjF,EAAKoE,MAGzBzE,EAAAC,EAAA7C,cAAA,uBAEE4C,EAAAC,EAAA7C,cAAA,UAAQwE,MAAOtB,EACPyE,SAAU,SAACC,GAAD,OAAMN,EAAKO,SAAS,CAAC3E,UAAW4E,OAAOC,SAASH,EAAGI,OAAOxD,WAC1E5B,EAAAC,EAAA7C,cAAA,UAAQwE,MAAO,GAAf,KACA5B,EAAAC,EAAA7C,cAAA,UAAQwE,MAAO,GAAf,KACA5B,EAAAC,EAAA7C,cAAA,UAAQwE,MAAO,GAAf,KACA5B,EAAAC,EAAA7C,cAAA,UAAQwE,MAAO,GAAf,KACA5B,EAAAC,EAAA7C,cAAA,UAAQwE,MAAO,GAAf,QAIN5B,EAAAC,EAAA7C,cAAA,gBACE4C,EAAAC,EAAA7C,cAAA,wBACA4C,EAAAC,EAAA7C,cAACmI,EAAD,CAAgBlF,KAAMA,EAAKoE,GACXnE,UAAWA,EACXvD,MAAOA,EACPC,OAAQA,EACRuD,KAAMA,EACNC,KAAMA,aAhFEmD,aAwF5B6B,cACJ,SAAAA,EAAYhG,GAAM,IAAAiG,EAAA,OAAAjJ,OAAAC,EAAA,EAAAD,CAAAL,KAAAqJ,IAChBC,EAAAjJ,OAAAiD,EAAA,EAAAjD,CAAAL,KAAAK,OAAAkD,EAAA,EAAAlD,CAAAgJ,GAAA7F,KAAAxD,KAAMqD,KACDgF,MAAM,CAACzH,MAAO,IACPC,OAAQ,IACRuD,KAAM,EACNC,KAAM,IACNF,WAAY,EACZ6B,iBAAiB,CAACO,KAAK,EAAEwB,KAAK,IAP1BuB,wEAWT,IAAAC,EAAAvJ,KAAAwJ,EACmDxJ,KAAKqI,MAA1DzH,EADE4I,EACF5I,MAAMC,EADJ2I,EACI3I,OAAOuD,EADXoF,EACWpF,KAAKC,EADhBmF,EACgBnF,KAAKF,EADrBqF,EACqBrF,UAAU6B,EAD/BwD,EAC+BxD,iBACtC,OACEnC,EAAAC,EAAA7C,cAAA4C,EAAAC,EAAA2E,SAAA,KACE5E,EAAAC,EAAA7C,cAAA,gBACE4C,EAAAC,EAAA7C,cAAA,uBACA4C,EAAAC,EAAA7C,cAAA,oBACS,yBAET4C,EAAAC,EAAA7C,cAAA,mBAEE4C,EAAAC,EAAA7C,cAAA,SAAQyH,KAAK,QAAQC,IAAK,IAAKrB,IAAK,IAAK7B,MAAO7E,EACxCgI,SAAU,SAACC,GAAD,OAAMU,EAAKT,SAAS,CAAClI,MAAMmI,OAAOC,SAASH,EAAGI,OAAOxD,YAEtE7E,GAEHiD,EAAAC,EAAA7C,cAAA,oBAEE4C,EAAAC,EAAA7C,cAAA,SAAQyH,KAAK,QAAQC,IAAK,IAAKrB,IAAK,IAAK7B,MAAO5E,EACxC+H,SAAU,SAACC,GAAD,OAAMU,EAAKT,SAAS,CAACjI,OAAOkI,OAAOC,SAASH,EAAGI,OAAOxD,YAEvE5E,GAEHgD,EAAAC,EAAA7C,cAAA,kBAEE4C,EAAAC,EAAA7C,cAAA,SAAQyH,KAAK,QAAQC,IAAK,EAAGrB,IAAKjD,EAAMoB,MAAOrB,EACvCwE,SAAU,SAACC,GAAD,OAAMU,EAAKT,SAAS,CAAC1E,KAAK2E,OAAOC,SAASH,EAAGI,OAAOxD,YAErErB,GAEHP,EAAAC,EAAA7C,cAAA,kBAEE4C,EAAAC,EAAA7C,cAAA,SAAQyH,KAAK,QAAQC,IAAKvE,EAAMkD,IAAK,IAAO7B,MAAOpB,EAC3CuE,SAAU,SAACC,GAAD,OAAMU,EAAKT,SAAS,CAACzE,KAAK0E,OAAOC,SAASH,EAAGI,OAAOxD,YAErEpB,GAEHR,EAAAC,EAAA7C,cAAA,oCAGE4C,EAAAC,EAAA7C,cAAA,SAAQyH,KAAK,QAAQC,IAAK,EAAGrB,IAAK1G,EAAO6E,MAAOO,EAAiBO,KACzDqC,SAAU,SAACC,GAAD,OAAMU,EAAKT,SAAS,CAAC9C,iBAAiB3F,OAAAoJ,EAAA,EAAApJ,CAAA,GAAI2F,EAAL,CAAsBO,KAAKwC,OAAOC,SAASH,EAAGI,OAAOxD,cAJ9G,QAOE5B,EAAAC,EAAA7C,cAAA,SAAQyH,KAAK,QAAQC,IAAK,EAAGrB,IAAKzG,EAAQ4E,MAAOO,EAAiB+B,KAC1Da,SAAU,SAACC,GAAD,OAAMU,EAAKT,SAAS,CAAC9C,iBAAiB3F,OAAAoJ,EAAA,EAAApJ,CAAA,GAAI2F,EAAL,CAAsB+B,KAAKgB,OAAOC,SAASH,EAAGI,OAAOxD,cAE3GyD,KAAKC,UAAUnD,EAAiB,KAAK,MAExCnC,EAAAC,EAAA7C,cAAA,uBAEE4C,EAAAC,EAAA7C,cAAA,UAAQwE,MAAOtB,EACPyE,SAAU,SAACC,GAAD,OAAMU,EAAKT,SAAS,CAAC3E,UAAW4E,OAAOC,SAASH,EAAGI,OAAOxD,WAC1E5B,EAAAC,EAAA7C,cAAA,UAAQwE,MAAO,GAAf,KACA5B,EAAAC,EAAA7C,cAAA,UAAQwE,MAAO,GAAf,KACA5B,EAAAC,EAAA7C,cAAA,UAAQwE,MAAO,GAAf,KACA5B,EAAAC,EAAA7C,cAAA,UAAQwE,MAAO,GAAf,KACA5B,EAAAC,EAAA7C,cAAA,UAAQwE,MAAO,GAAf,KACA5B,EAAAC,EAAA7C,cAAA,UAAQwE,OAAQ,GAAhB,WAIN5B,EAAAC,EAAA7C,cAAA,gBACE4C,EAAAC,EAAA7C,cAAA,wBACA4C,EAAAC,EAAA7C,cAACyI,EAAD,CAAwB9I,MAAOA,EACPC,OAAQA,EACRuD,KAAMA,EACNC,KAAMA,EACNH,KAAMA,EAAI,IACVC,WAAyB,IAAbA,EAAgB,KAAOA,EACnC6B,iBAAkBA,aAlFVwB,aA0FpCmC,cACJ,SAAAA,EAAYtG,GAAM,IAAAuG,EAAA,OAAAvJ,OAAAC,EAAA,EAAAD,CAAAL,KAAA2J,IAChBC,EAAAvJ,OAAAiD,EAAA,EAAAjD,CAAAL,KAAAK,OAAAkD,EAAA,EAAAlD,CAAAsJ,GAAAnG,KAAAxD,KAAMqD,KACDgF,MAAQ,CAACjE,KAAM,EACNC,KAAM,IACNzD,MAAO,IACPoF,iBAAiB,CAACO,KAAK,EAAGwB,KAAK,GAC/B5D,UAAW,MANTyF,wEAUT,IAAAC,EAAA7J,KAAA8J,EAC4C9J,KAAKqI,MAAnDjE,EADE0F,EACF1F,KAAKC,EADHyF,EACGzF,KAAKzD,EADRkJ,EACQlJ,MAAMoF,EADd8D,EACc9D,iBAAiB7B,EAD/B2F,EAC+B3F,UACtC,OACEN,EAAAC,EAAA7C,cAAA4C,EAAAC,EAAA2E,SAAA,KACE5E,EAAAC,EAAA7C,cAAA,gBACE4C,EAAAC,EAAA7C,cAAA,uBACA4C,EAAAC,EAAA7C,cAAA,oBACS,yBAET4C,EAAAC,EAAA7C,cAAA,mBAEE4C,EAAAC,EAAA7C,cAAA,SAAQyH,KAAK,QAAQC,IAAK,IAAKrB,IAAK,IAAK7B,MAAO7E,EACxCgI,SAAU,SAACC,GAAD,OAAMgB,EAAKf,SAAS,CAAClI,MAAMmI,OAAOC,SAASH,EAAGI,OAAOxD,YAEtE7E,GAEHiD,EAAAC,EAAA7C,cAAA,kBAEE4C,EAAAC,EAAA7C,cAAA,SAAQyH,KAAK,QAAQC,IAAK,EAAGrB,IAAKjD,EAAMoB,MAAOrB,EACvCwE,SAAU,SAACC,GAAD,OAAMgB,EAAKf,SAAS,CAAC1E,KAAK2E,OAAOC,SAASH,EAAGI,OAAOxD,YAErErB,GAEHP,EAAAC,EAAA7C,cAAA,kBAEE4C,EAAAC,EAAA7C,cAAA,SAAQyH,KAAK,QAAQC,IAAKvE,EAAMkD,IAAK,IAAO7B,MAAOpB,EAC3CuE,SAAU,SAACC,GAAD,OAAMgB,EAAKf,SAAS,CAACzE,KAAK0E,OAAOC,SAASH,EAAGI,OAAOxD,YAErEpB,GAEHR,EAAAC,EAAA7C,cAAA,oCAGE4C,EAAAC,EAAA7C,cAAA,SAAQyH,KAAK,QAAQC,IAAK,EAAGrB,IAAK1G,EAAO6E,MAAOO,EAAiBO,KACzDqC,SAAU,SAACC,GAAD,OAAMgB,EAAKf,SAAS,CAAC9C,iBAAiB3F,OAAAoJ,EAAA,EAAApJ,CAAA,GAAI2F,EAAL,CAAsBO,KAAKwC,OAAOC,SAASH,EAAGI,OAAOxD,cAE3GyD,KAAKC,UAAUnD,EAAiB,KAAK,MAExCnC,EAAAC,EAAA7C,cAAA,oDAKF4C,EAAAC,EAAA7C,cAAA,gBACE4C,EAAAC,EAAA7C,cAAA,wBADF,mDAGE4C,EAAAC,EAAA7C,cAACyI,EAAD,CAAwB9I,MAAOA,EACPC,OAAQ,GACRuD,KAAMA,EACNC,KAAMA,EACNH,KAAMA,EAAI,IACVC,WAAyB,IAAbA,EAAgB,KAAOA,EACnC6B,iBAAkBA,IAE1CnC,EAAAC,EAAA7C,cAACmI,EAAD,CAAgBlF,KAAMA,EAAI,IACVC,UAAWA,EACXvD,MAAOA,EACPC,OAAQ,IACRuD,KAAMA,EACNC,KAAMA,IAEtBR,EAAAC,EAAA7C,cAAC8I,EAAD,CAA4B7F,KAAMA,EAAI,IACVE,KAAMA,EACNC,KAAMA,EACNzD,MAAOA,EACPoF,iBAAkBA,EAClBe,cAAe,SAAC5C,GAAD,OAAa0F,EAAKf,SAAS,CAAC3E,kBAGzEN,EAAAC,EAAA7C,cAAA,gBACE4C,EAAAC,EAAA7C,cAAA,0BADF,yDAEyDkD,WAlFlBqD,aAyFzCwC,cACJ,SAAAA,EAAY3G,GAAM,IAAA4G,EAAA,OAAA5J,OAAAC,EAAA,EAAAD,CAAAL,KAAAgK,IAChBC,EAAA5J,OAAAiD,EAAA,EAAAjD,CAAAL,KAAAK,OAAAkD,EAAA,EAAAlD,CAAA2J,GAAAxG,KAAAxD,KAAMqD,KACDgF,MAAQ,CAACjE,KAAM,EACNC,KAAM,IACNzD,MAAO,IACPC,OAAQ,IACRqJ,eAAe,CAAC3D,KAAK,EAAGwB,KAAK,IAC7BH,cAAc,KACdzD,UAAW,MART8F,wEAYT,IAAAE,EAAAnK,KAAAoK,EAC+DpK,KAAKqI,MAAtEjE,EADEgG,EACFhG,KAAKC,EADH+F,EACG/F,KAAKzD,EADRwJ,EACQxJ,MAAMC,EADduJ,EACcvJ,OAAO+G,EADrBwC,EACqBxC,cAAcsC,EADnCE,EACmCF,eAAe/F,EADlDiG,EACkDjG,UACzD,OACEN,EAAAC,EAAA7C,cAAA4C,EAAAC,EAAA2E,SAAA,KACE5E,EAAAC,EAAA7C,cAAA,gBACE4C,EAAAC,EAAA7C,cAAA,uBACA4C,EAAAC,EAAA7C,cAAA,oBACS,yBAET4C,EAAAC,EAAA7C,cAAA,mBAEE4C,EAAAC,EAAA7C,cAAA,SAAQyH,KAAK,QAAQC,IAAK,IAAKrB,IAAK,IAAK7B,MAAO7E,EACxCgI,SAAU,SAACC,GAAD,OAAMsB,EAAKrB,SAAS,CAAClI,MAAMmI,OAAOC,SAASH,EAAGI,OAAOxD,YAEtE7E,GAEHiD,EAAAC,EAAA7C,cAAA,oBAEE4C,EAAAC,EAAA7C,cAAA,SAAQyH,KAAK,QAAQC,IAAK,IAAKrB,IAAK,IAAK7B,MAAO5E,EACxC+H,SAAU,SAACC,GAAD,OAAMsB,EAAKrB,SAAS,CAACjI,OAAOkI,OAAOC,SAASH,EAAGI,OAAOxD,YAEvE5E,GAEHgD,EAAAC,EAAA7C,cAAA,kBAEE4C,EAAAC,EAAA7C,cAAA,SAAQyH,KAAK,QAAQC,IAAK,EAAGrB,IAAKjD,EAAMoB,MAAOrB,EACvCwE,SAAU,SAACC,GAAD,OAAMsB,EAAKrB,SAAS,CAAC1E,KAAK2E,OAAOC,SAASH,EAAGI,OAAOxD,YAErErB,GAEHP,EAAAC,EAAA7C,cAAA,kBAEE4C,EAAAC,EAAA7C,cAAA,SAAQyH,KAAK,QAAQC,IAAKvE,EAAMkD,IAAK,IAAO7B,MAAOpB,EAC3CuE,SAAU,SAACC,GAAD,OAAMsB,EAAKrB,SAAS,CAACzE,KAAK0E,OAAOC,SAASH,EAAGI,OAAOxD,YAErEpB,GAEHR,EAAAC,EAAA7C,cAAA,iCAGE4C,EAAAC,EAAA7C,cAAA,SAAQyH,KAAK,QAAQC,IAAK,EAAGrB,IAAK1G,EAAO6E,MAAOyE,EAAe3D,KACvDqC,SAAU,SAACC,GAAD,OAAMsB,EAAKrB,SAAS,CAACoB,eAAe7J,OAAAoJ,EAAA,EAAApJ,CAAA,GAAI6J,EAAL,CAAoB3D,KAAKwC,OAAOC,SAASH,EAAGI,OAAOxD,cAJ1G,QAOE5B,EAAAC,EAAA7C,cAAA,SAAQyH,KAAK,QAAQC,IAAK,EAAGrB,IAAKzG,EAAQ4E,MAAOyE,EAAenC,KACxDa,SAAU,SAACC,GAAD,OAAMsB,EAAKrB,SAAS,CAACoB,eAAe7J,OAAAoJ,EAAA,EAAApJ,CAAA,GAAI6J,EAAL,CAAoBnC,KAAKgB,OAAOC,SAASH,EAAGI,OAAOxD,cAExG5B,EAAAC,EAAA7C,cAAA,UAAQoJ,QAAS,SAACxB,GAAD,OAAMsB,EAAKrB,SAAS,CAAClB,cAAcvH,OAAAoJ,EAAA,EAAApJ,CAAA,GAAI6J,OAAxD,iBACChB,KAAKC,UAAUe,EAAe,KAAK,MAEtCrG,EAAAC,EAAA7C,cAAA,oDAKF4C,EAAAC,EAAA7C,cAAA,gBACE4C,EAAAC,EAAA7C,cAAA,wBADF,mDAGE4C,EAAAC,EAAA7C,cAAA,OAAK8C,MAAO,CAACuG,SAAS,WAAW1J,MAAMA,EAAMC,OAAOA,IAClDgD,EAAAC,EAAA7C,cAAA,OAAK8C,MAAO,CAACuG,SAAS,aACpBzG,EAAAC,EAAA7C,cAACmI,EAAD,CAAgBlF,KAAMA,EAAI,IACVC,UAAWA,EACXvD,MAAOA,EACPC,OAAQA,EACRuD,KAAMA,EACNC,KAAMA,KAGxBR,EAAAC,EAAA7C,cAAA,OAAK8C,MAAO,CAACuG,SAAS,aACpBzG,EAAAC,EAAA7C,cAAA,OAAK8C,MAAO,CAAEuG,SAAS,WAAWC,KAAKL,EAAe3D,KAAKiE,IAAIN,EAAenC,KAChEnH,MAAM,EAAEC,OAAO,EACf4J,gBAAgB,WAIlC5G,EAAAC,EAAA7C,cAACyJ,EAAD,CAA4BxG,KAAMA,EAAI,IACVE,KAAMA,EACNC,KAAMA,EACNzD,MAAOA,EACPC,OAAQA,EACR+G,cAAeA,EACfb,cAAe,SAAC5C,GAAD,OAAagG,EAAKrB,SAAS,CAAC3E,eAC3CA,UAAWA,KAGzCN,EAAAC,EAAA7C,cAAA,gBACE4C,EAAAC,EAAA7C,cAAA,0BADF,yDAEyDkD,WApGlBqD,aA2GzCmD,cACJ,SAAAA,EAAYtH,GAAO,IAAAuH,EAAA,OAAAvK,OAAAC,EAAA,EAAAD,CAAAL,KAAA2K,IACjBC,EAAAvK,OAAAiD,EAAA,EAAAjD,CAAAL,KAAAK,OAAAkD,EAAA,EAAAlD,CAAAsK,GAAAnH,KAAAxD,KAAMqD,KACDgF,MAAQ,CAACwC,eAAe,KACfC,eAAe,KACf9E,iBAAiB,MAJd4E,wEAQV,IAAAG,EAAA/K,KAGHsI,EAAQpE,EAAI,IAHT8G,EAMgDhL,KAAKqI,MAAvDwC,EANEG,EAMFH,eAAeC,EANbE,EAMaF,eAAe9E,EAN5BgF,EAM4BhF,iBAC/B7B,EAAY2G,GAAkBD,EAClC,OACEhH,EAAAC,EAAA7C,cAAA4C,EAAAC,EAAA2E,SAAA,KACE5E,EAAAC,EAAA7C,cAAA,gBACE4C,EAAAC,EAAA7C,cAAA,uBAEF4C,EAAAC,EAAA7C,cAAA,gBACE4C,EAAAC,EAAA7C,cAAA,wBACA4C,EAAAC,EAAA7C,cAAA,OAAK8C,MAAO,CAACuG,SAAS,WAAW1J,MAd3B,IAcuCC,OAbtC,MAcLgD,EAAAC,EAAA7C,cAAA,OAAK8C,MAAO,CAACuG,SAAS,WAAW1J,MAf7B,IAeyCC,OAdxC,MAeHgD,EAAAC,EAAA7C,cAACmI,EAAD,CAAelF,KAAMoE,EACNnE,UAAWA,EACXC,KAfd,EAgBcC,KAfd,IAgBczD,MApBb,IAqBaC,OApBZ,OAuBLgD,EAAAC,EAAA7C,cAAA,OAAK8C,MAAO,CAACuG,SAAS,WAAW1J,MAxB7B,IAwByCC,OAvBxC,MAwBHgD,EAAAC,EAAA7C,cAACyI,EAAD,CAAwB9I,MAzBtB,IA0BsBC,OAzBrB,IA0BqBuD,KAxBvB,EAyBuBC,KAxBvB,IAyBuBH,KAAMoE,EACNnE,UAAWA,EACX6B,iBAAkBA,KAG5CnC,EAAAC,EAAA7C,cAAA,OAAK8C,MAAO,CAACuG,SAAS,WAAW1J,MAlC7B,IAkCyCC,OAjCxC,MAkCHgD,EAAAC,EAAA7C,cAACgK,EAAA,wBAAD,CAA0BrK,MAnCxB,IAoCwBC,OAnCvB,IAoCuBqK,gBAAiBC,yBACjBC,OAAQ,SAACC,GAAD,OAChCxH,EAAAC,EAAA7C,cAAA4C,EAAAC,EAAA2E,SAAA,KACE5E,EAAAC,EAAA7C,cAACgK,EAAA,MAAD,CAAQ/G,KAAMmH,EACNC,cAAe,SAACD,GAAD,OAAaN,EAAKjC,SAAS,CAAC9C,iBAAiBqF,EAAUrF,sBAE9EnC,EAAAC,EAAA7C,cAAC8I,EAAD,CAA4B7F,KAAMoE,EACNlE,KAzC/B,EA0C+BC,KAzC/B,IA0C+BzD,MA9C9B,IA+C8BoF,iBAAkBqF,EAAUrF,iBAC5Be,cAAe,SAAC8D,GAAD,OAAkBE,EAAKjC,SAAS,CAAC+B,sBAE5EhH,EAAAC,EAAA7C,cAACyJ,EAAD,CAA4BxG,KAAMoE,EACNlE,KAhD/B,EAiD+BC,KAhD/B,IAiD+BzD,MArD9B,IAsD8BC,OArD7B,IAsD6B+G,cAAeyD,EAAUzD,cACzBb,cAAe,SAAC+D,GAAD,OAAkBC,EAAKjC,SAAS,CAACgC,oBAChD3G,UAAWA,mBAnErBqD,aA+E9B+D,mLAEF,OACE1H,EAAAC,EAAA7C,cAACuK,EAAA,EAAD,KACE3H,EAAAC,EAAA7C,cAAA,OAAKwK,UAAU,OACb5H,EAAAC,EAAA7C,cAACuK,EAAA,EAAD,CAAME,GAAG,kBAAT,iBACA7H,EAAAC,EAAA7C,cAACuK,EAAA,EAAD,CAAME,GAAG,0BAAT,yBACA7H,EAAAC,EAAA7C,cAACuK,EAAA,EAAD,CAAME,GAAG,+BAAT,8BACA7H,EAAAC,EAAA7C,cAACuK,EAAA,EAAD,CAAME,GAAG,+BAAT,8BACA7H,EAAAC,EAAA7C,cAACuK,EAAA,EAAD,CAAME,GAAG,0BAAT,0BAEF7H,EAAAC,EAAA7C,cAAC0K,EAAA,EAAD,CAAOC,KAAK,iBAAiBC,OAAK,EAACC,UAAW1D,IAC9CvE,EAAAC,EAAA7C,cAAC0K,EAAA,EAAD,CAAOC,KAAK,yBAAyBC,OAAK,EAACC,UAAWzC,IACtDxF,EAAAC,EAAA7C,cAAC0K,EAAA,EAAD,CAAOC,KAAK,8BAA8BC,OAAK,EAACC,UAAWnC,IAC3D9F,EAAAC,EAAA7C,cAAC0K,EAAA,EAAD,CAAOC,KAAK,8BAA8BC,OAAK,EAACC,UAAW9B,IAC3DnG,EAAAC,EAAA7C,cAAC0K,EAAA,EAAD,CAAOC,KAAK,yBAAyBC,OAAK,EAACC,UAAWnB,YAf5CnD,aAqBlBuE,IAASX,OAAOvH,EAAAC,EAAA7C,cAAC+K,EAAD,MAAShL,SAASiL,eAAe","file":"static/js/main.c2570205.chunk.js","sourcesContent":["import {memoize_one} from \"memoize\";\nimport {getRotatedAxisCoordinate} from \"plot-utils\";\n\nconst PROCEDURE_DISPLAY = { \"HLHS STAGE I, CARDIAC\":\"S1P\",\n                            \"CHEST CLOSURE, CARDIAC OFF UNIT\":\"VAC ∆\",\n                            \"GASTROSTOMY, LAPAROSCOPIC, GENSURG\":\"Hip osteoplasty\",\n                            \"VESICOSTOMY CREATION/CLOSURE, GU\":\"GI\",\n                            \"BIDIRECTIONAL GLEN SHUNT, CARDIAC\":\"GI\"\n                            };\n\nconst PROCEDURE_TYPE = {\"HLHS STAGE I, CARDIAC\":0,\n                        \"CHEST CLOSURE, CARDIAC OFF UNIT\":2,\n                        \"GASTROSTOMY, LAPAROSCOPIC, GENSURG\":0,\n                        \"VESICOSTOMY CREATION/CLOSURE, GU\":2,\n                        \"BIDIRECTIONAL GLEN SHUNT, CARDIAC\":1\n                        };\n\nclass ProcedureObject {\n  constructor({id,name,start,end}){\n    this.id = id;\n    this.name = name;\n    this.start = start;\n    this.end = end;\n  }\n  \n  getType = memoize_one(()=>{\n    return PROCEDURE_TYPE[this.name];\n  });\n  \n  getDisplay = memoize_one(()=> {\n    return PROCEDURE_DISPLAY[this.name] || this.name;\n  });\n  \n  getDisplayBitmap = memoize_one(()=>{\n    let canvas = document.createElement(\"canvas\");\n    let ctx = canvas.getContext(\"2d\");\n    let display = this.getDisplay();\n    let font;\n    let width;\n    let height;\n    let rotatedPos;\n    switch(this.getType()) {\n      case 0:\n        font = \"10px Sans\";\n        ctx.font = font;\n        height = ctx.measureText(display).width;\n        width = 12;\n        canvas.width = width;\n        canvas.height = height;\n        ctx.font = font;\n        ctx.fillStyle = \"red\";\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.rotate(-Math.PI/2);\n        rotatedPos = getRotatedAxisCoordinate(width/2,height/2,-Math.PI/2);\n        ctx.fillText(display,rotatedPos.x,rotatedPos.y);\n        break;\n      case 1:\n        font = \"10px Sans\";\n        ctx.font = font;\n        height = ctx.measureText(display).width;\n        width = 12;\n        canvas.width = width;\n        canvas.height = height;\n        ctx.font = font;\n        ctx.fillStyle = \"orange\";\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.rotate(-Math.PI/2);\n        rotatedPos = getRotatedAxisCoordinate(width/2,height/2,-Math.PI/2);\n        ctx.fillText(display,rotatedPos.x,rotatedPos.y);\n        break;\n      case 2:\n      default:\n        font = \"10px Sans\";\n        ctx.font = font;\n        height = ctx.measureText(display).width;\n        width = 12;\n        canvas.width = width;\n        canvas.height = height;\n        ctx.font = font;\n        ctx.fillStyle = \"green\";\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.rotate(-Math.PI/2);\n        rotatedPos = getRotatedAxisCoordinate(width/2,height/2,-Math.PI/2);\n        ctx.fillText(display,rotatedPos.x,rotatedPos.y);\n        break;\n    }\n    return canvas;\n  });\n  \n  getDisplayHitbox = memoize_one(()=>{\n    let canvas = document.createElement(\"canvas\");\n    let ctx = canvas.getContext(\"2d\");\n    let display = this.getDisplay();\n    let font;\n    let width;\n    let height;\n    switch(this.getType()) {\n      case 0:\n        font = \"10px Sans\";\n        ctx.font = font;\n        height = ctx.measureText(display).width;\n        width = 12;\n        break;\n      case 1:\n        font = \"10px Sans\";\n        ctx.font = font;\n        height = ctx.measureText(display).width;\n        width = 12;\n        break;\n      case 2:\n      default:\n        font = \"10px Sans\";\n        ctx.font = font;\n        height = ctx.measureText(display).width;\n        width = 12;\n        break;\n    }\n    return {width,height};\n  });\n  \n  getDisplaySelectedBitmap = memoize_one(()=>{\n    let canvas = document.createElement(\"canvas\");\n    let ctx = canvas.getContext(\"2d\");\n    let display = this.getDisplay();\n    let font;\n    let width;\n    let height;\n    switch(this.getType()) {\n      case 0:\n        font = \"bold 10px Sans\";\n        ctx.font = font;\n        height = ctx.measureText(display).width;\n        width = 12;\n        canvas.width = width;\n        canvas.height = height;\n        ctx.font = font;\n        ctx.fillStyle = \"red\";\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.rotate(-Math.PI/2);\n        ctx.fillText(display,-height/2,width/2);\n        break;\n      case 1:\n        font = \"bold 10px Sans\";\n        ctx.font = font;\n        height = ctx.measureText(display).width;\n        width = 12;\n        canvas.width = width;\n        canvas.height = height;\n        ctx.font = font;\n        ctx.fillStyle = \"orange\";\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.rotate(-Math.PI/2);\n        ctx.fillText(display,-height/2,width/2);\n        break;\n      case 2:\n      default:\n        font = \"bold 10px Sans\";\n        ctx.font = font;\n        height = ctx.measureText(display).width;\n        width = 12;\n        canvas.width = width;\n        canvas.height = height;\n        ctx.font = font;\n        ctx.fillStyle = \"green\";\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.rotate(-Math.PI/2);\n        ctx.fillText(display,-height/2,width/2);\n        break;\n    }\n    return canvas;\n  });\n  \n  getDisplaySelectedHitbox = memoize_one(()=>{\n    let canvas = document.createElement(\"canvas\");\n    let ctx = canvas.getContext(\"2d\");\n    let display = this.getDisplay();\n    let font;\n    let width;\n    let height;\n    switch(this.getType()) {\n      case 0:\n        font = \"bold 10px Sans\";\n        ctx.font = font;\n        height = ctx.measureText(display).width;\n        width = 12;\n        break;\n      case 1:\n        font = \"bold 10px Sans\";\n        ctx.font = font;\n        height = ctx.measureText(display).width;\n        width = 12;\n        break;\n      case 2:\n      default:\n        font = \"bold 10px Sans\";\n        ctx.font = font;\n        height = ctx.measureText(display).width;\n        width = 12;\n        break;\n    }\n    return {width,height};\n  });\n  \n  draw(ctx,width,height,startDomX,endDomX) {\n    startDomX = Math.round(startDomX);\n    endDomX = Math.round(endDomX);\n    let lineWidth = endDomX+1-startDomX;\n    let lineCenter = (startDomX+endDomX+1) / 2;\n    // Line\n    switch (this.getType()) {\n      case 0:\n        ctx.strokeStyle = \"red\";\n        ctx.lineWidth = lineWidth;\n        ctx.beginPath();\n        ctx.moveTo(lineCenter,0);\n        ctx.lineTo(lineCenter,height);\n        ctx.stroke();\n        break;\n      case 1:\n        ctx.strokeStyle = \"orange\";\n        ctx.lineWidth = lineWidth;\n        ctx.beginPath();\n        ctx.moveTo(lineCenter,0);\n        ctx.lineTo(lineCenter,height);\n        ctx.stroke();\n        break;\n      case 2:\n      default:\n        ctx.strokeStyle = \"green\";\n        ctx.lineWidth = lineWidth;\n        ctx.beginPath();\n        ctx.moveTo(lineCenter,0);\n        ctx.lineTo(lineCenter,height);\n        ctx.stroke();\n        break;\n    }\n    // Label Bitmap\n    let bitmap = this.getDisplayBitmap();\n    ctx.drawImage(bitmap,\n                  startDomX-5-bitmap.width,\n                  5);\n  }\n  \n  drawHitbox(ctx,width,height,startDomX,endDomX) {\n    startDomX = Math.round(startDomX);\n    endDomX = Math.round(endDomX);\n    let lineWidth = endDomX - startDomX+1;\n    let lineCenter = (startDomX+endDomX+1) / 2;\n    // Line\n    ctx.beginPath();\n    ctx.lineWidth = lineWidth;\n    ctx.moveTo(lineCenter,0);\n    ctx.lineTo(lineCenter,height);\n    ctx.stroke();\n    // Hitbox\n    let hitbox = this.getDisplayHitbox();\n    ctx.fillRect( startDomX-5-hitbox.width,\n                  5,\n                  hitbox.width,\n                  hitbox.height);\n  }\n  \n  drawSelected(ctx,width,height,startDomX,endDomX) {\n    startDomX = Math.round(startDomX);\n    endDomX = Math.round(endDomX);\n    let lineWidth = endDomX - startDomX+1;\n    let lineCenter = (startDomX+endDomX+1) / 2;\n    // Line\n    switch (this.getType()) {\n      case 0:\n        ctx.strokeStyle = \"red\";\n        ctx.lineWidth = lineWidth;\n        ctx.beginPath();\n        ctx.moveTo(lineCenter,0);\n        ctx.lineTo(lineCenter,height);\n        ctx.stroke();\n        break;\n      case 1:\n        ctx.strokeStyle = \"orange\";\n        ctx.lineWidth = lineWidth;\n        ctx.beginPath();\n        ctx.moveTo(lineCenter,0);\n        ctx.lineTo(lineCenter,height);\n        ctx.stroke();\n        break;\n      case 2:\n      default:\n        ctx.strokeStyle = \"green\";\n        ctx.lineWidth = lineWidth;\n        ctx.beginPath();\n        ctx.moveTo(lineCenter,0);\n        ctx.lineTo(lineCenter,height);\n        ctx.stroke();\n        break;\n    }\n    // Label Bitmap\n    let bitmap = this.getDisplaySelectedBitmap();\n    ctx.drawImage(bitmap,\n                  startDomX-5-bitmap.width,\n                  5);\n  }\n\n  drawSelectedHitbox(ctx,width,height,startDomX,endDomX) {\n    startDomX = Math.round(startDomX);\n    endDomX = Math.round(endDomX);\n    let lineWidth = endDomX - startDomX+1;\n    let lineCenter = (startDomX+endDomX+1) / 2;\n    // Line\n    ctx.beginPath();\n    ctx.lineWidth = lineWidth;\n    ctx.moveTo(lineCenter,0);\n    ctx.lineTo(lineCenter,height);\n    ctx.stroke();\n    // Label Bitmap\n    let hitbox = this.getDisplaySelectedHitbox();\n    ctx.fillRect( startDomX-5-hitbox.width,\n                  5,\n                  hitbox.width,\n                  hitbox.height);\n  }\n}\n\nexport default ProcedureObject;\n\n\nexport function compareProcedureObjects(obj1,obj2){\n  if (obj1.start!==obj2.start) {\n    return obj1.start-obj2.start;\n  }\n  else {\n    return obj1.end-obj2.end;\n  }\n}\n","import React, { PureComponent } from 'react';\nimport PropTypes from \"prop-types\";\nimport {toDomXCoord_Linear} from \"plot-utils\";\n// Import constants\nimport ProcedureObject, {compareProcedureObjects} from \"./ProcedureObject\";\n\nclass ProcedurePlot extends PureComponent {\n  constructor(props){\n    super(props);\n    this.ref = React.createRef();\n  }\n\n  render() {\n    let { height,width } = this.props;\n    return (\n      <canvas ref={this.ref} height={height} width={width} style={{display:\"block\",width:width,height:height}}></canvas>\n    );\n  }\n\n  componentDidMount(){\n    this.draw();\n  }\n  \n  componentDidUpdate(){\n    this.draw();\n  }\n  \n  draw() {\n    let { data,selection,\n          minX,maxX,width,height} = this.props;\n    // Column index data and fill bitmaps etc.\n    this.render_memo = this.render_memo || {};\n    let memo = this.render_memo;\n    if (memo.data !== data ) {\n      memo.data = data;\n      memo.ProcedureObjectCollection = data.map( (obj)=>new ProcedureObject(obj) )\n                                            .sort(compareProcedureObjects);\n    }\n    // Clear plots\n    let canvas = this.ref.current;\n    let ctx = canvas.getContext(\"2d\");\n    ctx.globalAlpha = 1;\n    ctx.clearRect(0,0,width,height);\n    // Plot\n    for (let obj of memo.ProcedureObjectCollection) {\n      if (obj.start > maxX || obj.end < minX) {\n        continue;\n      }\n      let startDomX = toDomXCoord_Linear(width,minX,maxX,obj.start);\n      let endDomX = toDomXCoord_Linear(width,minX,maxX,obj.end);\n      if (obj.id === selection) {\n        obj.drawSelected(ctx,width,height,startDomX,endDomX);\n      }\n      else {\n        obj.draw(ctx,width,height,startDomX,endDomX);\n      }\n    }\n  }\n}\n\nProcedurePlot.propTypes = {\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  minX: PropTypes.number.isRequired,\n  maxX: PropTypes.number.isRequired,\n  data: PropTypes.array.isRequired,\n  selection: PropTypes.number,\n}\n\nexport default ProcedurePlot;\n\n","import React, { PureComponent } from 'react';\nimport PropTypes from \"prop-types\";\nimport TimeDiff from \"react-timediff\";\nimport {toDomXCoord_Linear,\n        fromDomXCoord_Linear} from \"plot-utils\";\n\nclass ProcedurePlotTimeDiff extends PureComponent {\n  render() {\n    let { \n          width,\n          height,\n          data,\n          selection, \n          hoveringPosition,\n          minX,maxX,\n          } = this.props;\n    if (hoveringPosition===null || selection===null || data.length===0) {\n      return null;\n    }\n    this.render_memo = this.render_memo || {};\n    let memo = this.render_memo;\n    if (memo.data!==data) {\n      memo.data = data;\n      memo.normalizedData = {};\n      for (let d of data) {\n        memo.normalizedData[d.id] = d;\n      }\n    }\n    let selectedObj = memo.normalizedData[selection];\n    let selectionEndDomX = selectedObj.end;\n    let hoverX = fromDomXCoord_Linear(width,minX,maxX,hoveringPosition.domX);\n    return (\n      <div style={{width:width, height:height}}>\n        <TimeDiff width={width}\n                  height={20}\n                  minX={minX}\n                  maxX={maxX}\n                  startX={selectionEndDomX}\n                  endX={hoverX}\n                  />\n      </div>\n    );\n  }\n}\n\nProcedurePlotTimeDiff.propTypes = {\n  data: PropTypes.array.isRequired,\n  selection: PropTypes.number,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  minX: PropTypes.number.isRequired,\n  maxX: PropTypes.number.isRequired,\n  hoveringPosition: PropTypes.object,\n};\n\nexport default ProcedurePlotTimeDiff;\nexport {TimeDiff};\n\n\n","import { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {bisect_left} from \"bisect\";\nimport {fromDomXCoord_Linear} from \"plot-utils\";\nimport ProcedureObject from \"./ProcedureObject\";\n\nclass ProcedurePlotHoverSelector extends Component {\n  render() {\n    return null;\n  }\n\n  shouldComponentUpdate(nextProps,nextState){\n    if (nextProps.hoveringPosition===this.props.hoveringPosition) {\n      return false;\n    }\n    return true;\n  }\n\n  componentDidMount(){\n    this.select();\n  }\n  \n  componentDidUpdate(){\n    this.select();\n  }\n  \n  select() {\n    let { data,\n          minX,maxX,width,\n          hoveringPosition,\n          selectHandler} = this.props;\n    if (hoveringPosition===undefined) {\n      return;\n    }\n    if (hoveringPosition===null) {\n      selectHandler(null);\n      return;\n    }\n    this.select_memo = this.select_memo || {};\n    let memo = this.select_memo;\n    // Column index data and fill bitmaps etc.\n    if (memo.data !== data ) {\n      memo.data = data;\n      let procedureObjectCollection = data.map( obj=>new ProcedureObject(obj))\n      memo.filteredProcedureObjects = procedureObjectCollection.filter( obj=>obj.getType()===0);\n      memo.ends = memo.filteredProcedureObjects.map(({end})=>end)\n                                    .sort();\n    }\n    if (memo.filteredProcedureObjects.length===0) {\n      return;\n    }\n    // Filter\n    let hoverX = fromDomXCoord_Linear(width,minX,maxX,hoveringPosition.domX);\n    let index = Math.max(0,bisect_left(memo.ends,hoverX));\n    let selection = memo.filteredProcedureObjects[index].id;\n    selectHandler(selection);\n  }\n}\n\nProcedurePlotHoverSelector.propTypes = {\n  data: PropTypes.array.isRequired,\n  minX: PropTypes.number.isRequired,\n  maxX: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired,\n  hoveringPosition: PropTypes.object,\n  selectHandler: PropTypes.func.isRequired,\n};\n\nexport default ProcedurePlotHoverSelector;\n","import { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {toDomXCoord_Linear} from \"plot-utils\";\n// Import constants\nimport ProcedureObject, {compareProcedureObjects} from \"./ProcedureObject\";\n\nclass ProcedurePlotClickSelector extends PureComponent {\n  constructor(props){\n    super(props);\n    this.lastEvent = null;\n    this.pickingCanvas = document.createElement(\"canvas\");\n    this.pickingCanvas.width = 1;\n    this.pickingCanvas.height = 1;\n  }\n  \n  render() {\n    return null;\n  }\n  \n  componentDidMount(){\n    this.select();\n  }\n  \n  componentDidUpdate(){\n    this.select();\n  }\n  \n  select() {\n    let { data,\n          selection,\n          minX,maxX,width,height,\n          clickPosition,\n          selectHandler} = this.props;\n    if (clickPosition===this.lastEvent) {\n      return;\n    }\n    this.lastEvent = clickPosition;\n    if (!clickPosition) {\n      selectHandler(null);\n      return;\n    }\n    this.select_memo = this.select_memo || {};\n    let memo = this.select_memo;\n    if (memo.data !== data ) {\n      memo.data = data;\n      memo.ProcedureObjectCollection = data.map( (obj)=>new ProcedureObject(obj) )\n                                            .sort(compareProcedureObjects);\n    }\n    // Clear plots\n    let {pickingCanvas} = this;\n    let ctx = pickingCanvas.getContext(\"2d\");\n    ctx.clearRect(0,0,1,1);\n    ctx.translate(-clickPosition.domX,-clickPosition.domY);\n    // Draw and pick\n    let curSelection;\n    for (let obj of memo.ProcedureObjectCollection) {\n      if (obj.start > maxX || obj.end < minX) {\n        continue;\n      }\n      // Draw\n      let startDomX = toDomXCoord_Linear(width,minX,maxX,obj.start);\n      let endDomX = toDomXCoord_Linear(width,minX,maxX,obj.end);\n      if (obj.id === selection) {\n        obj.drawSelectedHitbox(ctx,width,height,startDomX,endDomX);\n      }\n      else {\n        obj.drawHitbox(ctx,width,height,startDomX,endDomX);\n      }\n      // Pick\n      let imgData = ctx.getImageData(0,0,1,1);\n      if (imgData.data[3]!==0) {\n        curSelection = obj.id;\n        if (curSelection === selection) {\n          curSelection = null;\n        }\n        break;\n      }\n    }\n    selectHandler(curSelection);\n    ctx.translate(clickPosition.domX,clickPosition.domY);\n  }\n}\n\nProcedurePlotClickSelector.propTypes = {\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  minX: PropTypes.number.isRequired,\n  maxX: PropTypes.number.isRequired,\n  data: PropTypes.array.isRequired,\n  selection: PropTypes.number,\n  selectHandler: PropTypes.func.isRequired,\n};\n\nexport default ProcedurePlotClickSelector;\n","import ProcedurePlot from \"./ProcedurePlot\";\nimport ProcedurePlotTimeDiff, {TimeDiff} from \"./ProcedurePlotTimeDiff\";\nimport ProcedurePlotHoverSelector from \"./ProcedurePlotHoverSelector\";\nimport ProcedurePlotClickSelector from \"./ProcedurePlotClickSelector\";\nexport default ProcedurePlot;\nexport {ProcedurePlotTimeDiff, ProcedurePlotHoverSelector, ProcedurePlotClickSelector};\n","import React, {Component,Fragment} from 'react';\nimport ReactDOM from 'react-dom';\nimport {HashRouter as Router, Link, Route} from \"react-router-dom\";\n\nimport ProcedurePlot, {ProcedurePlotTimeDiff,ProcedurePlotClickSelector,ProcedurePlotHoverSelector} from \"./lib\";\nimport {PlotInteractionProvider,Relay,INTERACTION_MODEL_BARE} from \"react-plot-interaction-box\";\n\n// CSS\nimport \"./index.css\";\n\nconst data = {\n  \"HLHS STAGE I, CARDIAC\": [{ id:0,\n                              name:\"HLHS STAGE I, CARDIAC\",\n                              start:800, end:850}],\n  \"CHEST CLOSURE, CARDIAC OFF UNIT\": [{ id:1,\n                                        name:\"CHEST CLOSURE, CARDIAC OFF UNIT\",\n                                        start:5100, end:5200}],\n  \"GASTROSTOMY, LAPAROSCOPIC, GENSURG\": [{id:2,\n                                          name:\"GASTROSTOMY, LAPAROSCOPIC, GENSURG\",\n                                          start:9000, end:9020}],\n  \"VESICOSTOMY CREATION/CLOSURE, GU\": [{id:3,\n                                        name:\"VESICOSTOMY CREATION/CLOSURE, GU\",\n                                        start:10300, end:10400}],\n  \"BIDIRECTIONAL GLEN SHUNT, CARDIAC\": [{ id:4,\n                                          name:\"BIDIRECTIONAL GLEN SHUNT, CARDIAC\",\n                                          start:16000, end:16400}],\n  \"all\": [{ id:0,\n            name:\"HLHS STAGE I, CARDIAC\",\n            start:800, end:850},\n          { id:1,\n            name:\"CHEST CLOSURE, CARDIAC OFF UNIT\",\n            start:5100, end:5200},\n          { id:2,\n            name:\"GASTROSTOMY, LAPAROSCOPIC, GENSURG\",\n            start:9000, end:9020},\n          { id:3,\n            name:\"VESICOSTOMY CREATION/CLOSURE, GU\",\n            start:10300, end:10400},\n          { id:4,\n            name:\"BIDIRECTIONAL GLEN SHUNT, CARDIAC\",\n            start:16000, end:16400},\n          ],\n}\n\nclass ProcedurePlotBundle extends Component {\n  constructor(props){\n    super(props);\n    this.state={width: 800,\n                height: 400,\n                minX: 0,\n                maxX: 20000,\n                data_: \"HLHS STAGE I, CARDIAC\",\n                selection: 1,\n    };\n  }\n  \n  render() {\n    let {width,height,minX,maxX,data_,selection} = this.state;\n    return (\n      <>\n        <fieldset>\n          <legend>Props</legend>\n          <div>\n            width\n            <input  type=\"range\" min={400} max={800} value={width}\n                    onChange={(ev)=>this.setState({width:Number.parseInt(ev.target.value)})}\n                    />\n            {width}\n          </div>\n          <div>\n            height\n            <input  type=\"range\" min={100} max={400} value={height}\n                    onChange={(ev)=>this.setState({height:Number.parseInt(ev.target.value)})}\n                    />\n            {height}\n          </div>\n          <div>\n            minX\n            <input  type=\"range\" min={0} max={maxX} value={minX}\n                    onChange={(ev)=>this.setState({minX:Number.parseInt(ev.target.value)})}\n                    />\n            {minX}\n          </div>\n          <div>\n            maxX\n            <input  type=\"range\" min={minX} max={20000} value={maxX}\n                    onChange={(ev)=>this.setState({maxX:Number.parseInt(ev.target.value)})}\n                    />\n            {maxX}\n          </div>\n          <div>\n            data\n            <select value={data_}\n                    onChange={(ev)=>this.setState({data_:ev.target.value})}>\n              <option value=\"HLHS STAGE I, CARDIAC\">HLHS STAGE I, CARDIAC</option>\n              <option value=\"CHEST CLOSURE, CARDIAC OFF UNIT\">CHEST CLOSURE, CARDIAC OFF UNIT</option>\n              <option value=\"GASTROSTOMY, LAPAROSCOPIC, GENSURG\">GASTROSTOMY, LAPAROSCOPIC, GENSURG</option>\n              <option value=\"VESICOSTOMY CREATION/CLOSURE, GU\">VESICOSTOMY CREATION/CLOSURE, GU</option>\n              <option value=\"BIDIRECTIONAL GLEN SHUNT, CARDIAC\">BIDIRECTIONAL GLEN SHUNT, CARDIAC</option>\n              <option value=\"all\">all</option>\n            </select>\n            <pre>\n              {JSON.stringify(data[data_])}\n            </pre>\n          </div>\n          <div>\n            selection\n            <select value={selection}\n                    onChange={(ev)=>this.setState({selection: Number.parseInt(ev.target.value)})}>\n              <option value={0}>0</option>\n              <option value={1}>1</option>\n              <option value={2}>2</option>\n              <option value={3}>3</option>\n              <option value={4}>4</option>\n            </select>\n          </div>\n        </fieldset>\n        <fieldset>\n          <legend>Result</legend>\n          <ProcedurePlot  data={data[data_]}\n                          selection={selection}\n                          width={width}\n                          height={height}\n                          minX={minX}\n                          maxX={maxX}\n                          />\n        </fieldset>\n      </>\n    );\n  }\n}\n\nclass ProcedurePlotTimeDiffBundle extends Component {\n  constructor(props){\n    super(props);\n    this.state={width: 800,\n                height: 400,\n                minX: 0,\n                maxX: 20000,\n                selection: -1,\n                hoveringPosition:{domX:0,domY:0},\n    };\n  }\n  \n  render() {\n    let {width,height,minX,maxX,selection,hoveringPosition} = this.state;\n    return (\n      <>\n        <fieldset>\n          <legend>Props</legend>\n          <div>\n            data: {\"[{id,start,end,name}]\"}\n          </div>\n          <div>\n            width\n            <input  type=\"range\" min={400} max={800} value={width}\n                    onChange={(ev)=>this.setState({width:Number.parseInt(ev.target.value)})}\n                    />\n            {width}\n          </div>\n          <div>\n            height\n            <input  type=\"range\" min={100} max={400} value={height}\n                    onChange={(ev)=>this.setState({height:Number.parseInt(ev.target.value)})}\n                    />\n            {height}\n          </div>\n          <div>\n            minX\n            <input  type=\"range\" min={0} max={maxX} value={minX}\n                    onChange={(ev)=>this.setState({minX:Number.parseInt(ev.target.value)})}\n                    />\n            {minX}\n          </div>\n          <div>\n            maxX\n            <input  type=\"range\" min={minX} max={20000} value={maxX}\n                    onChange={(ev)=>this.setState({maxX:Number.parseInt(ev.target.value)})}\n                    />\n            {maxX}\n          </div>\n          <div>\n            hoveringPosition\n            .domX\n            <input  type=\"range\" min={0} max={width} value={hoveringPosition.domX}\n                    onChange={(ev)=>this.setState({hoveringPosition:{...hoveringPosition,domX:Number.parseInt(ev.target.value)}})}\n                    />\n            .domY\n            <input  type=\"range\" min={0} max={height} value={hoveringPosition.domY}\n                    onChange={(ev)=>this.setState({hoveringPosition:{...hoveringPosition,domY:Number.parseInt(ev.target.value)}})}\n                    />\n            {JSON.stringify(hoveringPosition,null,' ')}\n          </div>\n          <div>\n            selection\n            <select value={selection}\n                    onChange={(ev)=>this.setState({selection: Number.parseInt(ev.target.value)})}>\n              <option value={0}>0</option>\n              <option value={1}>1</option>\n              <option value={2}>2</option>\n              <option value={3}>3</option>\n              <option value={4}>4</option>\n              <option value={-1}>null</option>\n            </select>\n          </div>\n        </fieldset>\n        <fieldset>\n          <legend>Result</legend>\n          <ProcedurePlotTimeDiff  width={width}\n                                  height={height}\n                                  minX={minX}\n                                  maxX={maxX}\n                                  data={data[\"all\"]}\n                                  selection={ selection===-1? null : selection }\n                                  hoveringPosition={hoveringPosition}\n                                  />\n        </fieldset>\n      </>\n    );\n  }\n}\n\nclass ProcedurePlotHoverSelectorBundle extends Component {\n  constructor(props){\n    super(props);\n    this.state = {minX: 0,\n                  maxX: 20000,\n                  width: 800,\n                  hoveringPosition:{domX:0, domY:0},\n                  selection: null\n    };\n  }\n  \n  render() {\n    let {minX,maxX,width,hoveringPosition,selection} = this.state;\n    return (\n      <>\n        <fieldset>\n          <legend>Props</legend>\n          <div>\n            data: {\"[{id,start,end,name}]\"}\n          </div>\n          <div>\n            width\n            <input  type=\"range\" min={400} max={800} value={width}\n                    onChange={(ev)=>this.setState({width:Number.parseInt(ev.target.value)})}\n                    />\n            {width}\n          </div>\n          <div>\n            minX\n            <input  type=\"range\" min={0} max={maxX} value={minX}\n                    onChange={(ev)=>this.setState({minX:Number.parseInt(ev.target.value)})}\n                    />\n            {minX}\n          </div>\n          <div>\n            maxX\n            <input  type=\"range\" min={minX} max={20000} value={maxX}\n                    onChange={(ev)=>this.setState({maxX:Number.parseInt(ev.target.value)})}\n                    />\n            {maxX}\n          </div>\n          <div>\n            hoveringPosition\n            .domX\n            <input  type=\"range\" min={0} max={width} value={hoveringPosition.domX}\n                    onChange={(ev)=>this.setState({hoveringPosition:{...hoveringPosition,domX:Number.parseInt(ev.target.value)}})}\n                    />\n            {JSON.stringify(hoveringPosition,null,' ')}\n          </div>\n          <div>\n            selectHandler: \n            function(selectionID)\n          </div>\n        </fieldset>\n        <fieldset>\n          <legend>Result</legend>\n          This component does not display anything itself.\n          <ProcedurePlotTimeDiff  width={width}\n                                  height={20}\n                                  minX={minX}\n                                  maxX={maxX}\n                                  data={data[\"all\"]}\n                                  selection={ selection===-1? null : selection }\n                                  hoveringPosition={hoveringPosition}\n                                  />\n          <ProcedurePlot  data={data[\"all\"]}\n                          selection={selection}\n                          width={width}\n                          height={200}\n                          minX={minX}\n                          maxX={maxX}\n                          />\n          <ProcedurePlotHoverSelector data={data[\"all\"]}\n                                      minX={minX}\n                                      maxX={maxX}\n                                      width={width}\n                                      hoveringPosition={hoveringPosition}\n                                      selectHandler={(selection)=>this.setState({selection})}\n                                      />\n        </fieldset>\n        <fieldset>\n          <legend>Callback</legend>\n          selectHandler args, the id of the selected procedure: {selection}\n        </fieldset>\n      </>\n    );\n  }\n}\n\nclass ProcedurePlotClickSelectorBundle extends Component {\n  constructor(props){\n    super(props);\n    this.state = {minX: 0,\n                  maxX: 20000,\n                  width: 800,\n                  height: 200,\n                  clickPosition_:{domX:0, domY:10},\n                  clickPosition:null,\n                  selection: null\n    };\n  }\n  \n  render() {\n    let {minX,maxX,width,height,clickPosition,clickPosition_,selection} = this.state;\n    return (\n      <>\n        <fieldset>\n          <legend>Props</legend>\n          <div>\n            data: {\"[{id,start,end,name}]\"}\n          </div>\n          <div>\n            width\n            <input  type=\"range\" min={400} max={800} value={width}\n                    onChange={(ev)=>this.setState({width:Number.parseInt(ev.target.value)})}\n                    />\n            {width}\n          </div>\n          <div>\n            height\n            <input  type=\"range\" min={200} max={400} value={height}\n                    onChange={(ev)=>this.setState({height:Number.parseInt(ev.target.value)})}\n                    />\n            {height}\n          </div>\n          <div>\n            minX\n            <input  type=\"range\" min={0} max={maxX} value={minX}\n                    onChange={(ev)=>this.setState({minX:Number.parseInt(ev.target.value)})}\n                    />\n            {minX}\n          </div>\n          <div>\n            maxX\n            <input  type=\"range\" min={minX} max={20000} value={maxX}\n                    onChange={(ev)=>this.setState({maxX:Number.parseInt(ev.target.value)})}\n                    />\n            {maxX}\n          </div>\n          <div>\n            clickPosition\n            .domX\n            <input  type=\"range\" min={0} max={width} value={clickPosition_.domX}\n                    onChange={(ev)=>this.setState({clickPosition_:{...clickPosition_,domX:Number.parseInt(ev.target.value)}})}\n                    />\n            .domY\n            <input  type=\"range\" min={0} max={height} value={clickPosition_.domY}\n                    onChange={(ev)=>this.setState({clickPosition_:{...clickPosition_,domY:Number.parseInt(ev.target.value)}})}\n                    />\n            <button onClick={(ev)=>this.setState({clickPosition:{...clickPosition_}})}>Trigger Click</button>\n            {JSON.stringify(clickPosition_,null,' ')}\n          </div>\n          <div>\n            selectHandler: \n            function(selectionID)\n          </div>\n        </fieldset>\n        <fieldset>\n          <legend>Result</legend>\n          This component does not display anything itself.\n          <div style={{position:\"relative\",width:width,height:height}}>\n            <div style={{position:\"absolute\"}}>\n              <ProcedurePlot  data={data[\"all\"]}\n                              selection={selection}\n                              width={width}\n                              height={height}\n                              minX={minX}\n                              maxX={maxX}\n                              />\n            </div>\n            <div style={{position:\"absolute\"}}>\n              <div style={{ position:\"relative\",left:clickPosition_.domX,top:clickPosition_.domY,\n                            width:2,height:2,\n                            backgroundColor:\"red\"}}>\n              </div>\n            </div>\n          </div>\n          <ProcedurePlotClickSelector data={data[\"all\"]}\n                                      minX={minX}\n                                      maxX={maxX}\n                                      width={width}\n                                      height={height}\n                                      clickPosition={clickPosition}\n                                      selectHandler={(selection)=>this.setState({selection})}\n                                      selection={selection}\n                                      />\n        </fieldset>\n        <fieldset>\n          <legend>Callback</legend>\n          selectHandler args, the id of the selected procedure: {selection}\n        </fieldset>\n      </>\n    );\n  }\n}\n\nclass ProcedurePlotFullDemo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {hoverSelection:null,\n                  clickSelection:null,\n                  hoveringPosition:null\n                  };\n  }\n  \n  render() {\n    let width = 800;\n    let height = 400;\n    let data_ = data[\"all\"];\n    let minX = 0;\n    let maxX = 20000;\n    let {hoverSelection,clickSelection,hoveringPosition} = this.state;\n    let selection = clickSelection || hoverSelection;\n    return (\n      <>\n        <fieldset>\n          <legend>Demo</legend>\n        </fieldset>\n        <fieldset>\n          <legend>Result</legend>\n          <div style={{position:\"relative\",width:width,height:height}}>\n            <div style={{position:\"absolute\",width:width,height:height}}>\n              <ProcedurePlot data={data_}\n                             selection={selection}\n                             minX={minX}\n                             maxX={maxX}\n                             width={width}\n                             height={height}\n                             />\n            </div>\n            <div style={{position:\"absolute\",width:width,height:height}}>\n              <ProcedurePlotTimeDiff  width={width}\n                                      height={height}\n                                      minX={minX}\n                                      maxX={maxX}\n                                      data={data_}\n                                      selection={selection}\n                                      hoveringPosition={hoveringPosition}\n                                      />\n            </div>\n            <div style={{position:\"absolute\",width:width,height:height}}>\n              <PlotInteractionProvider  width={width}\n                                        height={height}\n                                        transitionGraph={INTERACTION_MODEL_BARE}\n                                        render={(positions)=>\n                <>\n                  <Relay  data={positions}\n                          updateHandler={(positions)=>this.setState({hoveringPosition:positions.hoveringPosition})}\n                          />\n                  <ProcedurePlotHoverSelector data={data_}\n                                              minX={minX}\n                                              maxX={maxX}\n                                              width={width}\n                                              hoveringPosition={positions.hoveringPosition}\n                                              selectHandler={(hoverSelection)=>this.setState({hoverSelection})}\n                                              />\n                  <ProcedurePlotClickSelector data={data_}\n                                              minX={minX}\n                                              maxX={maxX}\n                                              width={width}\n                                              height={height}\n                                              clickPosition={positions.clickPosition}\n                                              selectHandler={(clickSelection)=>this.setState({clickSelection})}\n                                              selection={selection}\n                                              />\n                </>\n                                        }/>\n            </div>\n          </div>\n        </fieldset>\n      </>\n    );\n  }\n}\n\nclass App extends Component{\n  render(){\n    return (\n      <Router>\n        <nav className=\"app\">\n          <Link to=\"/ProcedurePlot\">ProcedurePlot</Link>\n          <Link to=\"/ProcedurePlotTimeDiff\">ProcedurePlotTimeDiff</Link>\n          <Link to=\"/ProcedurePlotHoverSelector\">ProcedurePlotHoverSelector</Link>\n          <Link to=\"/ProcedurePlotClickSelector\">ProcedurePlotClickSelector</Link>\n          <Link to=\"/ProcedurePlotFullDemo\">ProcedurePlotFullDemo</Link>\n        </nav>\n        <Route path=\"/ProcedurePlot\" exact component={ProcedurePlotBundle}/>\n        <Route path=\"/ProcedurePlotTimeDiff\" exact component={ProcedurePlotTimeDiffBundle}/>\n        <Route path=\"/ProcedurePlotHoverSelector\" exact component={ProcedurePlotHoverSelectorBundle}/>\n        <Route path=\"/ProcedurePlotClickSelector\" exact component={ProcedurePlotClickSelectorBundle}/>\n        <Route path=\"/ProcedurePlotFullDemo\" exact component={ProcedurePlotFullDemo}/>\n      </Router>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}